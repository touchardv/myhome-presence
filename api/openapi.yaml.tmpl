openapi: 3.0.1
info:
  title: Presence API.
  description: |
    Documentation of the Presence API Web Service.
  contact:
    name: Vincent Touchard
    email: touchardv@gmail.com
  license:
    name: MIT
    url: http://opensource.org/licenses/MIT
  version: 0.0.3
servers:
- url: http://{{ .address }}:{{ .port }}/api
paths:
  /devices:
    get:
      tags:
      - devices
      summary: Query known devices, optionally specifying to filter by status
      operationId: queryDevices
      parameters:
      - description: The device status to filter on
        in: query
        name: status
        required: false
        schema:
          type: object
          $ref: '#/components/schemas/DeviceStatus'
      responses:
        200:
          description: A list of devices
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
    post:
      tags:
      - devices
      summary: Register a new device.
      operationId: registerDevice
      requestBody:
        description: A device
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
        required: true
      responses:
        201:
          description: ' Success'
          content: {}
        400:
          description: ' Invalid parameters'
          content: {}
  /devices/{id}:
    get:
      tags:
      - devices
      summary: Find a device given its identifier.
      operationId: findDevice
      parameters:
      - name: id
        in: path
        description: The ID of the device
        required: true
        schema:
          type: string
      responses:
        200:
          description: Device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        404:
          description: Not found
          content: {}
    post:
      tags:
      - devices
      summary: Attempt to contact a device given its identifier
      operationId: contactDevice
      parameters:
      - name: id
        in: path
        description: The ID of the device
        required: true
        schema:
          type: string
      responses:
        202:
          description: Accepted
        404:
          description: Not found
    put:
      tags:
      - devices
      summary: Update a device given its identifier.
      operationId: updateDevice
      parameters:
      - name: id
        in: path
        description: The ID of the device
        required: true
        schema:
          type: string
      requestBody:
        description: A device
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
        required: true
      responses:
        200:
          description: Device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        400:
          description: ' Invalid parameters'
          content: {}
        404:
          description: ' Not found'
          content: {}
    delete:
      tags:
      - devices
      summary: Unregister a device given its identifier.
      operationId: unregisterDevice
      parameters:
      - name: id
        in: path
        description: The ID of the device
        required: true
        schema:
          type: string
      responses:
        204:
          description: ' Success'
          content: {}
        404:
          description: ' Not found'
          content: {}
components:
  schemas:
    Device:
      title: Device represents a single device that can be tracked.
      required:
      - identifier
      type: object
      properties:
        description:
          type: string
          example: My phone
        identifier:
          type: string
          example: my-phone
        interfaces:
          type: array
          items:
            $ref: '#/components/schemas/Interface'
        created_at:
          description: The device creation date and time (assigned by the service at registration or discovery).
          type: string
          format: date-time
        first_seen_at:
          type: string
          format: date-time
        last_seen_at:
          type: string
          format: date-time
        present:
          type: boolean
        properties:
          type: object
          additionalProperties:
            type: string
        status:
          type: object
          $ref: '#/components/schemas/DeviceStatus'
        updated_at:
          description: The device last update date and time.
          type: string
          format: date-time
    Interface:
      required:
      - Type
      type: object
      properties:
        MACAddress:
          type: string
          example: a1:b2:c3:04:05:ff
        IPv4Address:
          type: string
          example: 192.168.10.20
        Type:
          $ref: '#/components/schemas/InterfaceType'
      description: Interface defines a physical/software interface that can be uniquely
        addressed
    InterfaceType:
      type: string
      description: |-
        InterfaceType defines the type of physical/software interface
      enum: [unknown, ethernet, wifi, ipv4, bluetooth, ble]
      example: ethernet
    DeviceStatus:
      type: string
      description: DeviceStatus defines the status of a device
      enum: [discovered, ignored, tracked]
      required: true
  responses:
    deviceArray:
      description: A list of devices
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Device'
